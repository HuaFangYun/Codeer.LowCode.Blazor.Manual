@using Codeer.LowCode.Blazor.Components
@using Codeer.LowCode.Blazor.Utils
@using Microsoft.AspNetCore.Components.Web
@using Design.Samples.ColorPicker

@if (IsViewMode == true) {
  <div class="d-flex py-2">
    <div class="color-tip" style="background:@(Value)"></div>
    <span class="d-block" style="@Field?.GetStyleString()">@Value</span>
  </div>
} else {
  <label class="d-flex align-items-center">
    <input class="color-picker"
           type="color"
           disabled="@IsDisabled"
           id="@WebElementId"
           value="@Value"
           @onchange="RaiseOnValueChanged"/>
    <span style="@Field?.GetStyleString()">@Value</span>
  </label>
}

@code {

  [Parameter]
  public ColorPickerField? Field { get; set; }

  [Parameter]
  public ColorPickerFieldDesign? Design { get; set; }

  [Parameter]
  public string WebElementId { get; set; } = Guid.NewGuid().ToString();

  public bool? IsDisabled => Field?.IsEnabled == false;

  public bool? IsViewMode => Field?.IsViewOnly;

  public string? Value => string.IsNullOrEmpty(Field?.Value) ? Design?.Default : Field?.Value;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    Field?.SetStateChangedReciver(StateHasChanged);
  }

  private async Task RaiseOnValueChanged(ChangeEventArgs e) {
    if (Field == null) return;
    await Field.SetValueAsync(e.Value?.ToString());
  }

}

